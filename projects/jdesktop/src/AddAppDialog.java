/**
 * Created : Mar 30, 2012
 *
 * @author pquiring
 */

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

import javaforce.*;
import javaforce.linux.*;

public class AddAppDialog extends javax.swing.JDialog implements ActionListener {

  /**
   * Creates new form AddAppDialog
   */
  public AddAppDialog(java.awt.Frame parent, boolean modal) {
    super(parent, modal);
    initComponents();
    This = this;
    Object xid = Linux.x11_get_id(this);
    try {
      Linux.x11_set_dock(xid);
    } catch (Throwable t) {
      JFLog.log(t);
    }
    dispose();  //this makes no sense??? but is required for setUndecorated()
    setUndecorated(true);
    setLocation(0, 0);
    setSize(Dock.sx, Dock.sy - Dock.dock.getPanelHeight());
    setAlwaysOnTop(true);
    buttons.setLayout(new IconLayout());
    new Thread() {
      public void run() {
        DesktopCache.buildCache();
      }
    }.start();
    setAlwaysOnTop(true);
    toFront();
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        search = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        buttons = new javax.swing.JPanel();
        cancel = new javax.swing.JButton();

        jLabel1.setText("Search");

        search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchKeyReleased(evt);
            }
        });

        buttons.setLayout(null);
        jScrollPane1.setViewportView(buttons);

        cancel.setText("Cancel");
        cancel.setMargin(new java.awt.Insets(0, 0, 0, 0));
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(search, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancel)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

  private void searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchKeyReleased
    if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {dispose(); return;}
    addButtons(search.getText());
  }//GEN-LAST:event_searchKeyReleased

  private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
    dispose();
  }//GEN-LAST:event_cancelActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttons;
    private javax.swing.JButton cancel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField search;
    // End of variables declaration//GEN-END:variables

  public boolean accepted;
  public String icon, name, file;
  private AddAppDialog This;

  public static void loadApps() {
    new Thread() {
      public void run() {
        DesktopCache.buildCache();
      }
    }.start();
  }

  private void addButton(String icon, String name, String file) {
    JFImage jficon = IconCache.loadIcon(icon);
    jficon = IconCache.scaleIcon(jficon, 48, 48);
    JButton button = new JButton(jficon);
    button.setActionCommand(file);
    button.addActionListener(this);
    button.setToolTipText(name);
    JLabel label = new JLabel(name);
    label.setVerticalAlignment(SwingConstants.TOP);
    label.setHorizontalAlignment(SwingConstants.CENTER);
    Dimension bd = button.getPreferredSize();
    Dimension ld = label.getPreferredSize();
//System.out.println("d=" + d.width +"," + d.height);
    JPanel panel = new JPanel();
    panel.setLayout(null);
    Dimension both = new Dimension(bd);
    both.height += ld.height;
    panel.setPreferredSize(both);
    panel.add(button);
    button.setBounds(0,0,bd.width,bd.height);
    panel.add(label);
    label.setBounds(0,bd.height,bd.width,ld.height);  //force label to same width as button
    buttons.add(panel);
  }

  private void addButtons(String search) {
    buttons.removeAll();
    if (search.length() == 0) return;
    java.util.List<DesktopCache.Desktop> apps = DesktopCache.getList();
    int cnt = apps.size();
    for(int a=0;a<cnt;a++) {
      DesktopCache.Desktop app = apps.get(a);
      if (app.name.toLowerCase().indexOf(search.toLowerCase()) != -1) {
        addButton(app.icon, app.name, app.file);
      }
    }
    validate();
    repaint();
  }

  public void actionPerformed(ActionEvent ae) {
    JButton b = (JButton)ae.getSource();
    String file = b.getActionCommand();
    java.util.List<DesktopCache.Desktop> apps = DesktopCache.getList();
    for(int a=0;a<apps.size();a++) {
      DesktopCache.Desktop app = apps.get(a);
      if (app.file.equals(file)) {
        this.name = app.name;
        this.file = app.file;
        this.icon = app.icon;
        accepted = true;
        dispose();
      }
    }
  }

  //kinda like the FlowLayout but more like a paragraph than a simple line
  private class IconLayout implements LayoutManager {
    private int dx=1, dy=1;

    public void addLayoutComponent(String string, Component c) {
    }

    public void removeLayoutComponent(Component c) {
    }

    public Dimension preferredLayoutSize(Container p) {
      layoutContainer(p);
      return new Dimension(dx, dy);
    }

    public Dimension minimumLayoutSize(Container p) {
      layoutContainer(p);
      return new Dimension(dx, dy);
    }

    public void layoutContainer(Container p) {
      int mx = buttons.getWidth();
      int x = 0;
      int y = 0;
      int my = 0;
      int cnt = p.getComponentCount();
      for(int a=0;a<cnt;a++) {
        Component c = p.getComponent(a);
        Dimension d = c.getPreferredSize();
        if ((x + d.width) > mx) {
          y += my;
          my = 0;
          x = 0;
        }
        if (d.height > my) my = d.height;
        c.setBounds(x,y,d.width,d.height);
        x += d.width;
      }
      dx = mx;
      dy = y + my;
    }

  }
}
